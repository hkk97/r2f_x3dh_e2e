// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.16.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables

import 'api/rust_x3dh_e2e.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.initApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_x3dh_e2e',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  String decryptWithBytesKey(
      {required List<int> sharedSecretKey,
      required List<int> ciphertext,
      required List<int> iv,
      dynamic hint});

  String decryptWithHexStringKey(
      {required String sharedSecretKey,
      required List<int> ciphertext,
      required List<int> iv,
      dynamic hint});

  (Uint8List, Uint8List) encryptWithBytesKey(
      {required List<int> sharedSecretKey,
      required String plaintext,
      dynamic hint});

  (Uint8List, Uint8List) encryptWithHexStringKey(
      {required String sharedSecretKey,
      required String plaintext,
      dynamic hint});

  Future<void> initApp({dynamic hint});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  String decryptWithBytesKey(
      {required List<int> sharedSecretKey,
      required List<int> ciphertext,
      required List<int> iv,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_list_prim_u_8_loose(sharedSecretKey);
        var arg1 = cst_encode_list_prim_u_8_loose(ciphertext);
        var arg2 = cst_encode_list_prim_u_8_loose(iv);
        return wire.wire_decrypt_with_bytes_key(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kDecryptWithBytesKeyConstMeta,
      argValues: [sharedSecretKey, ciphertext, iv],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDecryptWithBytesKeyConstMeta => const TaskConstMeta(
        debugName: "decrypt_with_bytes_key",
        argNames: ["sharedSecretKey", "ciphertext", "iv"],
      );

  @override
  String decryptWithHexStringKey(
      {required String sharedSecretKey,
      required List<int> ciphertext,
      required List<int> iv,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(sharedSecretKey);
        var arg1 = cst_encode_list_prim_u_8_loose(ciphertext);
        var arg2 = cst_encode_list_prim_u_8_loose(iv);
        return wire.wire_decrypt_with_hex_string_key(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kDecryptWithHexStringKeyConstMeta,
      argValues: [sharedSecretKey, ciphertext, iv],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDecryptWithHexStringKeyConstMeta => const TaskConstMeta(
        debugName: "decrypt_with_hex_string_key",
        argNames: ["sharedSecretKey", "ciphertext", "iv"],
      );

  @override
  (Uint8List, Uint8List) encryptWithBytesKey(
      {required List<int> sharedSecretKey,
      required String plaintext,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_list_prim_u_8_loose(sharedSecretKey);
        var arg1 = cst_encode_String(plaintext);
        return wire.wire_encrypt_with_bytes_key(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_record_list_prim_u_8_strict_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kEncryptWithBytesKeyConstMeta,
      argValues: [sharedSecretKey, plaintext],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEncryptWithBytesKeyConstMeta => const TaskConstMeta(
        debugName: "encrypt_with_bytes_key",
        argNames: ["sharedSecretKey", "plaintext"],
      );

  @override
  (Uint8List, Uint8List) encryptWithHexStringKey(
      {required String sharedSecretKey,
      required String plaintext,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(sharedSecretKey);
        var arg1 = cst_encode_String(plaintext);
        return wire.wire_encrypt_with_hex_string_key(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_record_list_prim_u_8_strict_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kEncryptWithHexStringKeyConstMeta,
      argValues: [sharedSecretKey, plaintext],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEncryptWithHexStringKeyConstMeta => const TaskConstMeta(
        debugName: "encrypt_with_hex_string_key",
        argNames: ["sharedSecretKey", "plaintext"],
      );

  @override
  Future<void> initApp({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_init_app(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kInitAppConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @protected
  String dco_decode_String(dynamic raw) {
    return raw as String;
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    return raw as Uint8List;
  }

  @protected
  (Uint8List, Uint8List)
      dco_decode_record_list_prim_u_8_strict_list_prim_u_8_strict(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_list_prim_u_8_strict(arr[0]),
      dco_decode_list_prim_u_8_strict(arr[1]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    return;
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  (Uint8List, Uint8List)
      sse_decode_record_list_prim_u_8_strict_list_prim_u_8_strict(
          SseDeserializer deserializer) {
    var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
    var var_field1 = sse_decode_list_prim_u_8_strict(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {}

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    return deserializer.buffer.getInt32();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  int cst_encode_u_8(int raw) {
    return raw;
  }

  @protected
  void cst_encode_unit(void raw) {
    return raw;
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_record_list_prim_u_8_strict_list_prim_u_8_strict(
      (Uint8List, Uint8List) self, SseSerializer serializer) {
    sse_encode_list_prim_u_8_strict(self.$1, serializer);
    sse_encode_list_prim_u_8_strict(self.$2, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {}

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}
