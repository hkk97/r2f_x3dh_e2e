// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.16.

// Section: imports

use super::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::for_generated::wasm_bindgen;
use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: dart2rust

impl<T> CstDecode<Option<T>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
where
    JsValue: CstDecode<T>,
{
    fn cst_decode(self) -> Option<T> {
        (!self.is_null() && !self.is_undefined()).then(|| self.cst_decode())
    }
}
impl CstDecode<String> for String {
    fn cst_decode(self) -> String {
        self
    }
}
impl CstDecode<Vec<u8>> for Box<[u8]> {
    fn cst_decode(self) -> Vec<u8> {
        self.into_vec()
    }
}
impl CstDecode<(Vec<u8>, Vec<u8>)> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> (Vec<u8>, Vec<u8>) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl CstDecode<String> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> String {
        self.as_string().expect("non-UTF-8 string, or not a string")
    }
}
impl CstDecode<Vec<u8>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<u8> {
        self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Uint8Array>()
            .to_vec()
            .into()
    }
}
impl CstDecode<u8> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> u8 {
        self.unchecked_into_f64() as _
    }
}

#[wasm_bindgen]
pub fn dart_fn_deliver_output(
    call_id: i32,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    let message = unsafe {
        flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    };
    FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id, message)
}

#[wasm_bindgen]
pub fn wire_decrypt_with_bytes_key(
    shared_secret_key: Box<[u8]>,
    ciphertext: Box<[u8]>,
    iv: Box<[u8]>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_decrypt_with_bytes_key_impl(shared_secret_key, ciphertext, iv)
}

#[wasm_bindgen]
pub fn wire_decrypt_with_hex_string_key(
    shared_secret_key: String,
    ciphertext: Box<[u8]>,
    iv: Box<[u8]>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_decrypt_with_hex_string_key_impl(shared_secret_key, ciphertext, iv)
}

#[wasm_bindgen]
pub fn wire_encrypt_with_bytes_key(
    shared_secret_key: Box<[u8]>,
    plaintext: String,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_encrypt_with_bytes_key_impl(shared_secret_key, plaintext)
}

#[wasm_bindgen]
pub fn wire_encrypt_with_hex_string_key(
    shared_secret_key: String,
    plaintext: String,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_encrypt_with_hex_string_key_impl(shared_secret_key, plaintext)
}

#[wasm_bindgen]
pub fn wire_init_app(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_init_app_impl(port_)
}
